# Day 1 Part 2

```elixir
Mix.install([])
```

## Part 2

```elixir
defmodule Day1Part2 do
  def run(input) do
    input
    |> String.graphemes()
    |> Enum.with_index(1)
    |> Enum.reduce_while(0, fn {current_floor, index}, acc ->
      case current_floor do
        "(" ->
          {:cont, acc + 1}

        ")" ->
          if acc === 0,
            do: {:halt, index},
            else: {:cont, acc - 1}
      end
    end)
  end
end
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule MyTest do
  use ExUnit.Case, async: true

  alias Day1Part2

  test "examples" do
    assert Day1Part2.run(")") === 1
    assert Day1Part2.run("()())") === 5
  end
end

ExUnit.run()
```

## Puzzle

```elixir
defmodule Puzzle do
  alias Day1Part2

  def run do
    input = File.read!("#{__DIR__}/part1-input.txt")

    Day1Part2.run(input)
  end
end

Puzzle.run()
```
