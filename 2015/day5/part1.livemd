# Day 5 Part 1

```elixir
Mix.install([])
```

## Part 1

```elixir
defmodule Day5Part1 do
  @naughty_characters ~w(ab cd pq xy)
  @vowels ~w(a e i o u)

  def run(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.filter(fn string ->
      atleast_three_vowels(string) and
        contains_following_duplicate_characters(string) and
        does_not_contains_naughty_letters(string)
    end)
    |> length()
  end

  defp atleast_three_vowels(string) do
    number_of_vowels =
      Enum.filter(String.graphemes(string), fn character ->
        character in @vowels
      end)
      |> length()

    number_of_vowels >= 3
  end

  defp contains_following_duplicate_characters(string) do
    string
    |> String.graphemes()
    |> Enum.reduce_while({nil, false}, fn character, {previous_character, _result} ->
      if character === previous_character,
        do: {:halt, {character, true}},
        else: {:cont, {character, false}}
    end)
    |> elem(1)
  end

  defp does_not_contains_naughty_letters(string) do
    Enum.any?(@naughty_characters, fn naughty_characters ->
      String.contains?(string, naughty_characters)
    end)
    |> Kernel.not()
  end
end
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule MyTest do
  use ExUnit.Case, async: true

  alias Day5Part1

  test "examples" do
    assert Day5Part1.run("ugknbfddgicrmopn") === 1
    assert Day5Part1.run("aaa") === 1

    assert Day5Part1.run("jchzalrnumimnmhp") === 0
    assert Day5Part1.run("haegwjzuvuyypxyu") === 0
    assert Day5Part1.run("dvszwmarrgswjxmb") === 0
  end
end

ExUnit.run()
```

## Puzzle

```elixir
defmodule Puzzle do
  alias Day5Part1

  def run do
    input = File.read!("#{__DIR__}/part1-input.txt")

    Day5Part1.run(input)
  end
end

Puzzle.run()
```
