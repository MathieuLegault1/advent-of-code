# Day 6 Part 1

```elixir
Mix.install([])
```

## Part 1

```elixir
defmodule Day6Part1 do
  @number_of_rows 999
  @number_of_columns 999

  def run(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.reduce(initial_lights_configuration(), fn instruction, lights_configuration ->
      parsed_instruction = parse_instruction(instruction)

      update_in(
        lights_configuration,
        [
          Access.slice(parsed_instruction.from_x..parsed_instruction.to_x),
          Access.slice(parsed_instruction.from_y..parsed_instruction.to_y)
        ],
        fn light_configuration ->
          execute_instruction(light_configuration, parsed_instruction.instruction_type)
        end
      )
    end)
    |> count_number_of_lights_on()
  end

  defp initial_lights_configuration do
    for _ <- 0..@number_of_columns do
      for _ <- 0..@number_of_rows, do: false
    end
  end

  defp parse_instruction(instruction) do
    %{
      "instruction_type" => instruction_type,
      "from_x" => from_x,
      "from_y" => from_y,
      "to_x" => to_x,
      "to_y" => to_y
    } =
      Regex.named_captures(
        ~r/(?<instruction_type>\w+) (?<from_x>\d+),(?<from_y>\d+) through (?<to_x>\d+),(?<to_y>\d+)/,
        instruction
      )

    %{
      instruction_type: instruction_type,
      from_x: String.to_integer(from_x),
      from_y: String.to_integer(from_y),
      to_x: String.to_integer(to_x),
      to_y: String.to_integer(to_y)
    }
  end

  defp count_number_of_lights_on(lights_configuration) do
    lights_configuration
    |> Enum.map(fn row_light_configurations ->
      Enum.count(row_light_configurations, fn light_configuration ->
        light_configuration === true
      end)
    end)
    |> Enum.sum()
  end

  defp execute_instruction(_light_configuration, "on"), do: true
  defp execute_instruction(_light_configuration, "off"), do: false
  defp execute_instruction(light_configuration, "toggle"), do: !light_configuration
end
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule MyTest do
  use ExUnit.Case, async: true

  alias Day6Part1

  test "examples" do
    assert Day6Part1.run("turn on 0,0 through 999,999") === 1_000_000
    assert Day6Part1.run("toggle 0,0 through 999,0") === 1000
    assert Day6Part1.run("turn off 499,499 through 500,500") === 0
  end
end

ExUnit.run()
```

## Puzzle

```elixir
defmodule Puzzle do
  alias Day6Part1

  def run do
    input = File.read!("#{__DIR__}/part1-input.txt")

    Day6Part1.run(input)
  end
end

Puzzle.run()
```
