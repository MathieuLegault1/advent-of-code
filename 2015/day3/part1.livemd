# Day 3 Part 1

```elixir
Mix.install([])
```

## Part 1

```elixir
defmodule Day3Part1 do
  def run(input) do
    input
    |> String.graphemes()
    |> Enum.reduce({{0, 0}, MapSet.new([{0, 0}])}, fn direction,
                                                      {{current_x, current_y}, visited_houses} ->
      case direction do
        "^" ->
          new_position = {current_x, current_y - 1}
          {new_position, MapSet.put(visited_houses, new_position)}

        ">" ->
          new_position = {current_x + 1, current_y}
          {new_position, MapSet.put(visited_houses, new_position)}

        "<" ->
          new_position = {current_x - 1, current_y}
          {new_position, MapSet.put(visited_houses, new_position)}

        "v" ->
          new_position = {current_x, current_y + 1}
          {new_position, MapSet.put(visited_houses, new_position)}
      end
    end)
    |> elem(1)
    |> MapSet.size()
  end
end
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule MyTest do
  use ExUnit.Case, async: true

  alias Day3Part1

  test "examples" do
    assert Day3Part1.run(">") === 2
    assert Day3Part1.run("^>v<") === 4
    assert Day3Part1.run("^v^v^v^v^v") === 2
  end
end

ExUnit.run()
```

## Puzzle

```elixir
defmodule Puzzle do
  alias Day3Part1

  def run do
    input = File.read!("#{__DIR__}/part1-input.txt")

    Day3Part1.run(input)
  end
end

Puzzle.run()
```
