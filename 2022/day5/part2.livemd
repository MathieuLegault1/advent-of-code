# Day 5 Part 2

```elixir
Mix.install([])
```

## Part 2

```elixir
defmodule Day5Part2 do
  def run(input) do
    [stacks, operations] = String.split(input, "\n\n", trim: true)

    stacks = parse_stacks(stacks)
    operations = String.split(operations, "\n", trim: true)

    process_operations(stacks, operations)
    |> Enum.map(&crate_on_top/1)
    |> Enum.join("")
  end

  defp parse_stacks(stacks) do
    stacks
    |> String.split("\n", trim: true)
    |> Enum.drop(-1)
    |> Enum.reduce(%{}, fn stack, acc ->
      stack
      |> String.graphemes()
      |> Enum.drop(1)
      |> Enum.take_every(4)
      |> Enum.with_index(1)
      |> Enum.filter(fn {letter, _index} -> letter !== " " end)
      |> Enum.reduce(acc, fn {letter, index}, acc ->
        Map.update(acc, index, [letter], &(&1 ++ [letter]))
      end)
    end)
  end

  defp process_operations(stacks, operations) do
    Enum.reduce(operations, stacks, fn operation, stacks ->
      {move_amount, from_stack_index, to_stack_index} = parse_operation(operation)

      to_move_items =
        stacks
        |> Map.get(from_stack_index)
        |> Enum.take(move_amount)

      stacks
      |> Map.update!(from_stack_index, &Enum.drop(&1, move_amount))
      |> Map.update!(to_stack_index, &(to_move_items ++ &1))
    end)
  end

  defp crate_on_top({_stack_index, crates}), do: List.first(crates)

  defp parse_operation(operation) do
    %{
      "move_amount" => move_amount,
      "from_stack_index" => from_stack_index,
      "to_stack_index" => to_stack_index
    } =
      Regex.named_captures(
        ~r/move (?<move_amount>\d+) from (?<from_stack_index>\d+) to (?<to_stack_index>\d+)/,
        operation
      )

    {
      String.to_integer(move_amount),
      String.to_integer(from_stack_index),
      String.to_integer(to_stack_index)
    }
  end
end
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule MyTest do
  use ExUnit.Case, async: true

  alias Day5Part2

  test "example" do
    input = """
        [D]    
    [N] [C]    
    [Z] [M] [P]
     1   2   3 

    move 1 from 2 to 1
    move 3 from 1 to 3
    move 2 from 2 to 1
    move 1 from 1 to 2
    """

    assert Day5Part2.run(input) === "MCD"
  end
end

ExUnit.run()
```

## Puzzle

```elixir
defmodule Puzzle do
  alias Day5Part2

  def run do
    input = File.read!("#{__DIR__}/part1-input.txt")

    Day5Part2.run(input)
  end
end

Puzzle.run()
```
