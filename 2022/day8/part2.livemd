# Day 8 Part 2

```elixir
Mix.install([])
```

## Part 2

```elixir
defmodule Day8Part2 do
  # There must be a better way to do this...

  def run(input) do
    {trees_grid_layout, grid_width} = parse_trees_grid_layout(input)

    trees_grid_layout
    |> Enum.map(fn {{current_x, current_y}, _tree_height} ->
      top_score =
        calculate_y_axis_score((current_y - 1)..0//-1, trees_grid_layout, current_x, current_y)

      bottom_score =
        calculate_y_axis_score(
          (current_y + 1)..grid_width//1,
          trees_grid_layout,
          current_x,
          current_y
        )

      right_score =
        calculate_x_axis_score(
          (current_x + 1)..grid_width//1,
          trees_grid_layout,
          current_x,
          current_y
        )

      left_score =
        calculate_x_axis_score((current_x - 1)..0//-1, trees_grid_layout, current_x, current_y)

      top_score * bottom_score * right_score * left_score
    end)
    |> Enum.max()
  end

  defp calculate_x_axis_score(range, trees_grid_layout, current_x, current_y) do
    initial_tree_height = Map.get(trees_grid_layout, {current_x, current_y})

    Enum.reduce_while(range, 0, fn tree_x, current_score ->
      current_tree_height = Map.get(trees_grid_layout, {tree_x, current_y})

      if initial_tree_height > current_tree_height do
        {:cont, current_score + 1}
      else
        {:halt, current_score + 1}
      end
    end)
  end

  defp calculate_y_axis_score(range, trees_grid_layout, current_x, current_y) do
    initial_tree_height = Map.get(trees_grid_layout, {current_x, current_y})

    Enum.reduce_while(range, 0, fn tree_y, current_score ->
      current_tree_height = Map.get(trees_grid_layout, {current_x, tree_y})

      if initial_tree_height > current_tree_height do
        {:cont, current_score + 1}
      else
        {:halt, current_score + 1}
      end
    end)
  end

  defp parse_trees_grid_layout(input) do
    lines = String.split(input, "\n", trim: true)

    grid_layout =
      lines
      |> Enum.with_index()
      |> Enum.reduce(Map.new(), fn {line, current_x_index}, grid_layout ->
        line
        |> String.split("", trim: true)
        |> Enum.with_index()
        |> Enum.reduce(grid_layout, fn {tree_height, current_y_index}, grid_layout ->
          tree_height = String.to_integer(tree_height)

          Map.put(grid_layout, {current_x_index, current_y_index}, tree_height)
        end)
      end)

    grid_width = lines |> Enum.at(0) |> String.length()

    {grid_layout, grid_width - 1}
  end
end
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule MyTest do
  use ExUnit.Case, async: true

  alias Day8Part2

  test "example" do
    input = """
    30373
    25512
    65332
    33549
    35390
    """

    assert Day8Part2.run(input) === 8
  end
end

ExUnit.run()
```

## Puzzle

```elixir
defmodule Puzzle do
  alias Day8Part2

  def run do
    input = File.read!("#{__DIR__}/part1-input.txt")

    Day8Part2.run(input)
  end
end

Puzzle.run()
```
