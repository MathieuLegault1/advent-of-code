# Day 2 Part 1

```elixir
Mix.install([])
```

## Part 1

```elixir
defmodule Day2Part1 do
  @shapes %{
    "A" => :rock,
    "B" => :paper,
    "C" => :scissor,
    "X" => :rock,
    "Y" => :paper,
    "Z" => :scissor
  }

  def run(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn <<opponent_shape_character::binary-size(1), " ",
                     my_shape_character::binary-size(1)>> ->
      opponent_shape = Map.get(@shapes, opponent_shape_character)
      my_shape = Map.get(@shapes, my_shape_character)

      match_score(my_shape, opponent_shape) + shape_score(my_shape)
    end)
    |> Enum.sum()
  end

  defp match_score(opponent_shape, my_shape) do
    case {opponent_shape, my_shape} do
      {shape, shape} ->
        3

      {:rock, :scissor} ->
        6

      {:paper, :rock} ->
        6

      {:scissor, :paper} ->
        6

      _match ->
        0
    end
  end

  defp shape_score(:rock), do: 1
  defp shape_score(:paper), do: 2
  defp shape_score(:scissor), do: 3
end
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule MyTest do
  use ExUnit.Case, async: true

  alias Day2Part1

  test "example" do
    input = """
    A Y
    B X
    C Z
    """

    assert Day2Part1.run(input) === 15
  end
end

ExUnit.run()
```

## Puzzle

```elixir
defmodule Puzzle do
  alias Day2Part1

  def run do
    input = File.read!("#{__DIR__}/part1-input.txt")

    Day2Part1.run(input)
  end
end

Puzzle.run()
```
