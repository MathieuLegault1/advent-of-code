# Day 4 Part 1

```elixir
Mix.install([])
```

## Part 1

```elixir
defmodule Day4Part1 do
  def run(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.filter(fn elf_pair ->
      [elf_one, elf_two] = String.split(elf_pair, ",", trim: true)

      elf_contains_in?(elf_one, elf_two) or elf_contains_in?(elf_two, elf_one)
    end)
    |> Enum.count()
  end

  defp elf_contains_in?(elf_one, elf_two) do
    [elf_one_lower_bound, elf_one_upper_bound] = get_elf_bounds(elf_one)
    [elf_two_lower_bound, elf_two_upper_bound] = get_elf_bounds(elf_two)

    elf_one_lower_bound >= elf_two_lower_bound and
      elf_two_upper_bound >= elf_one_upper_bound
  end

  defp get_elf_bounds(elf) do
    elf
    |> String.split("-", trim: true)
    |> Enum.map(&String.to_integer/1)
  end
end
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule MyTest do
  use ExUnit.Case, async: true

  alias Day4Part1

  test "example" do
    input = """
    2-4,6-8
    2-3,4-5
    5-7,7-9
    2-8,3-7
    6-6,4-6
    2-6,4-8
    """

    assert Day4Part1.run(input) === 2
  end
end

ExUnit.run()
```

## Puzzle

```elixir
defmodule Puzzle do
  alias Day4Part1

  def run do
    input = File.read!("#{__DIR__}/part1-input.txt")

    Day4Part1.run(input)
  end
end

Puzzle.run()
```
